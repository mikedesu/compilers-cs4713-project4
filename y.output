Terminals which are not used

   RETURN
   ERROR
   END


State 36 conflicts: 5 shift/reduce
State 37 conflicts: 2 shift/reduce
State 56 conflicts: 5 shift/reduce
State 57 conflicts: 5 shift/reduce
State 58 conflicts: 5 shift/reduce
State 59 conflicts: 5 shift/reduce
State 60 conflicts: 5 shift/reduce
State 61 conflicts: 2 shift/reduce
State 62 conflicts: 2 shift/reduce
State 63 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 funcdefn

    3 @2: /* empty */

    4 funcdefn: type ID @2 LPARAN RPARAN stmtBlock

    5 stmt: typeDecl SEMICOLON

    6 @3: /* empty */

    7 stmt: ID @3 ASSIGN exp SEMICOLON
    8     | WHILE LPARAN exp RPARAN stmt
    9     | IF LPARAN exp RPARAN stmt stmtA
   10     | stmtBlock

   11 stmtA: ELSE stmt
   12      | /* empty */

   13 stmtList: stmt stmtList
   14         | /* empty */

   15 @4: /* empty */

   16 stmtBlock: LBRACE @4 stmtList RBRACE

   17 typeDecl: type ID

   18 type: INT
   19     | FLOAT

   20 exp: expA expB

   21 expA: expC expD

   22 expB: LT expA expB
   23     | GT expA expB
   24     | EQ expA expB
   25     | PLUS expA expB
   26     | MINUS expA expB
   27     | /* empty */

   28 expC: ID
   29     | ICONST
   30     | FCONST
   31     | MINUS exp
   32     | LPARAN exp RPARAN

   33 expD: MULT expC expD
   34     | DIVIDE expC expD
   35     | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
WHILE (258) 8
IF (259) 9
ELSE (260) 11
RETURN (261)
INT (262) 18
FLOAT (263) 19
ID (264) 4 7 17 28
ICONST (265) 29
FCONST (266) 30
ERROR (267)
END (268)
SEMICOLON (269) 5 7
LPARAN (270) 4 8 9 32
RPARAN (271) 4 8 9 32
LBRACE (272) 16
RBRACE (273) 16
ASSIGN (274) 7
EQ (275) 24
GT (276) 23
LT (277) 22
DIVIDE (278) 34
MULT (279) 33
MINUS (280) 26 31
PLUS (281) 25


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
program (28)
    on left: 2, on right: 0
@1 (29)
    on left: 1, on right: 2
funcdefn (30)
    on left: 4, on right: 2
@2 (31)
    on left: 3, on right: 4
stmt (32)
    on left: 5 7 8 9 10, on right: 8 9 11 13
@3 (33)
    on left: 6, on right: 7
stmtA (34)
    on left: 11 12, on right: 9
stmtList (35)
    on left: 13 14, on right: 13 16
stmtBlock (36)
    on left: 16, on right: 4 10
@4 (37)
    on left: 15, on right: 16
typeDecl (38)
    on left: 17, on right: 5
type (39)
    on left: 18 19, on right: 4 17
exp (40)
    on left: 20, on right: 7 8 9 31 32
expA (41)
    on left: 21, on right: 20 22 23 24 25 26
expB (42)
    on left: 22 23 24 25 26 27, on right: 20 22 23 24 25 26
expC (43)
    on left: 28 29 30 31 32, on right: 21 33 34
expD (44)
    on left: 33 34 35, on right: 21 33 34


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . funcdefn

    INT    shift, and go to state 4
    FLOAT  shift, and go to state 5

    funcdefn  go to state 6
    type      go to state 7


state 3

    0 $accept: program $end .

    $default  accept


state 4

   18 type: INT .

    $default  reduce using rule 18 (type)


state 5

   19 type: FLOAT .

    $default  reduce using rule 19 (type)


state 6

    2 program: @1 funcdefn .

    $default  reduce using rule 2 (program)


state 7

    4 funcdefn: type . ID @2 LPARAN RPARAN stmtBlock

    ID  shift, and go to state 8


state 8

    4 funcdefn: type ID . @2 LPARAN RPARAN stmtBlock

    $default  reduce using rule 3 (@2)

    @2  go to state 9


state 9

    4 funcdefn: type ID @2 . LPARAN RPARAN stmtBlock

    LPARAN  shift, and go to state 10


state 10

    4 funcdefn: type ID @2 LPARAN . RPARAN stmtBlock

    RPARAN  shift, and go to state 11


state 11

    4 funcdefn: type ID @2 LPARAN RPARAN . stmtBlock

    LBRACE  shift, and go to state 12

    stmtBlock  go to state 13


state 12

   16 stmtBlock: LBRACE . @4 stmtList RBRACE

    $default  reduce using rule 15 (@4)

    @4  go to state 14


state 13

    4 funcdefn: type ID @2 LPARAN RPARAN stmtBlock .

    $default  reduce using rule 4 (funcdefn)


state 14

   16 stmtBlock: LBRACE @4 . stmtList RBRACE

    WHILE   shift, and go to state 15
    IF      shift, and go to state 16
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    ID      shift, and go to state 17
    LBRACE  shift, and go to state 12

    $default  reduce using rule 14 (stmtList)

    stmt       go to state 18
    stmtList   go to state 19
    stmtBlock  go to state 20
    typeDecl   go to state 21
    type       go to state 22


state 15

    8 stmt: WHILE . LPARAN exp RPARAN stmt

    LPARAN  shift, and go to state 23


state 16

    9 stmt: IF . LPARAN exp RPARAN stmt stmtA

    LPARAN  shift, and go to state 24


state 17

    7 stmt: ID . @3 ASSIGN exp SEMICOLON

    $default  reduce using rule 6 (@3)

    @3  go to state 25


state 18

   13 stmtList: stmt . stmtList

    WHILE   shift, and go to state 15
    IF      shift, and go to state 16
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    ID      shift, and go to state 17
    LBRACE  shift, and go to state 12

    $default  reduce using rule 14 (stmtList)

    stmt       go to state 18
    stmtList   go to state 26
    stmtBlock  go to state 20
    typeDecl   go to state 21
    type       go to state 22


state 19

   16 stmtBlock: LBRACE @4 stmtList . RBRACE

    RBRACE  shift, and go to state 27


state 20

   10 stmt: stmtBlock .

    $default  reduce using rule 10 (stmt)


state 21

    5 stmt: typeDecl . SEMICOLON

    SEMICOLON  shift, and go to state 28


state 22

   17 typeDecl: type . ID

    ID  shift, and go to state 29


state 23

    8 stmt: WHILE LPARAN . exp RPARAN stmt

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    exp   go to state 35
    expA  go to state 36
    expC  go to state 37


state 24

    9 stmt: IF LPARAN . exp RPARAN stmt stmtA

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    exp   go to state 38
    expA  go to state 36
    expC  go to state 37


state 25

    7 stmt: ID @3 . ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 39


state 26

   13 stmtList: stmt stmtList .

    $default  reduce using rule 13 (stmtList)


state 27

   16 stmtBlock: LBRACE @4 stmtList RBRACE .

    $default  reduce using rule 16 (stmtBlock)


state 28

    5 stmt: typeDecl SEMICOLON .

    $default  reduce using rule 5 (stmt)


state 29

   17 typeDecl: type ID .

    $default  reduce using rule 17 (typeDecl)


state 30

   28 expC: ID .

    $default  reduce using rule 28 (expC)


state 31

   29 expC: ICONST .

    $default  reduce using rule 29 (expC)


state 32

   30 expC: FCONST .

    $default  reduce using rule 30 (expC)


state 33

   32 expC: LPARAN . exp RPARAN

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    exp   go to state 40
    expA  go to state 36
    expC  go to state 37


state 34

   31 expC: MINUS . exp

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    exp   go to state 41
    expA  go to state 36
    expC  go to state 37


state 35

    8 stmt: WHILE LPARAN exp . RPARAN stmt

    RPARAN  shift, and go to state 42


state 36

   20 exp: expA . expB

    EQ     shift, and go to state 43
    GT     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    PLUS   shift, and go to state 47

    EQ        [reduce using rule 27 (expB)]
    GT        [reduce using rule 27 (expB)]
    LT        [reduce using rule 27 (expB)]
    MINUS     [reduce using rule 27 (expB)]
    PLUS      [reduce using rule 27 (expB)]
    $default  reduce using rule 27 (expB)

    expB  go to state 48


state 37

   21 expA: expC . expD

    DIVIDE  shift, and go to state 49
    MULT    shift, and go to state 50

    DIVIDE    [reduce using rule 35 (expD)]
    MULT      [reduce using rule 35 (expD)]
    $default  reduce using rule 35 (expD)

    expD  go to state 51


state 38

    9 stmt: IF LPARAN exp . RPARAN stmt stmtA

    RPARAN  shift, and go to state 52


state 39

    7 stmt: ID @3 ASSIGN . exp SEMICOLON

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    exp   go to state 53
    expA  go to state 36
    expC  go to state 37


state 40

   32 expC: LPARAN exp . RPARAN

    RPARAN  shift, and go to state 54


state 41

   31 expC: MINUS exp .

    $default  reduce using rule 31 (expC)


state 42

    8 stmt: WHILE LPARAN exp RPARAN . stmt

    WHILE   shift, and go to state 15
    IF      shift, and go to state 16
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    ID      shift, and go to state 17
    LBRACE  shift, and go to state 12

    stmt       go to state 55
    stmtBlock  go to state 20
    typeDecl   go to state 21
    type       go to state 22


state 43

   24 expB: EQ . expA expB

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expA  go to state 56
    expC  go to state 37


state 44

   23 expB: GT . expA expB

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expA  go to state 57
    expC  go to state 37


state 45

   22 expB: LT . expA expB

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expA  go to state 58
    expC  go to state 37


state 46

   26 expB: MINUS . expA expB

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expA  go to state 59
    expC  go to state 37


state 47

   25 expB: PLUS . expA expB

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expA  go to state 60
    expC  go to state 37


state 48

   20 exp: expA expB .

    $default  reduce using rule 20 (exp)


state 49

   34 expD: DIVIDE . expC expD

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expC  go to state 61


state 50

   33 expD: MULT . expC expD

    ID      shift, and go to state 30
    ICONST  shift, and go to state 31
    FCONST  shift, and go to state 32
    LPARAN  shift, and go to state 33
    MINUS   shift, and go to state 34

    expC  go to state 62


state 51

   21 expA: expC expD .

    $default  reduce using rule 21 (expA)


state 52

    9 stmt: IF LPARAN exp RPARAN . stmt stmtA

    WHILE   shift, and go to state 15
    IF      shift, and go to state 16
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    ID      shift, and go to state 17
    LBRACE  shift, and go to state 12

    stmt       go to state 63
    stmtBlock  go to state 20
    typeDecl   go to state 21
    type       go to state 22


state 53

    7 stmt: ID @3 ASSIGN exp . SEMICOLON

    SEMICOLON  shift, and go to state 64


state 54

   32 expC: LPARAN exp RPARAN .

    $default  reduce using rule 32 (expC)


state 55

    8 stmt: WHILE LPARAN exp RPARAN stmt .

    $default  reduce using rule 8 (stmt)


state 56

   24 expB: EQ expA . expB

    EQ     shift, and go to state 43
    GT     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    PLUS   shift, and go to state 47

    EQ        [reduce using rule 27 (expB)]
    GT        [reduce using rule 27 (expB)]
    LT        [reduce using rule 27 (expB)]
    MINUS     [reduce using rule 27 (expB)]
    PLUS      [reduce using rule 27 (expB)]
    $default  reduce using rule 27 (expB)

    expB  go to state 65


state 57

   23 expB: GT expA . expB

    EQ     shift, and go to state 43
    GT     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    PLUS   shift, and go to state 47

    EQ        [reduce using rule 27 (expB)]
    GT        [reduce using rule 27 (expB)]
    LT        [reduce using rule 27 (expB)]
    MINUS     [reduce using rule 27 (expB)]
    PLUS      [reduce using rule 27 (expB)]
    $default  reduce using rule 27 (expB)

    expB  go to state 66


state 58

   22 expB: LT expA . expB

    EQ     shift, and go to state 43
    GT     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    PLUS   shift, and go to state 47

    EQ        [reduce using rule 27 (expB)]
    GT        [reduce using rule 27 (expB)]
    LT        [reduce using rule 27 (expB)]
    MINUS     [reduce using rule 27 (expB)]
    PLUS      [reduce using rule 27 (expB)]
    $default  reduce using rule 27 (expB)

    expB  go to state 67


state 59

   26 expB: MINUS expA . expB

    EQ     shift, and go to state 43
    GT     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    PLUS   shift, and go to state 47

    EQ        [reduce using rule 27 (expB)]
    GT        [reduce using rule 27 (expB)]
    LT        [reduce using rule 27 (expB)]
    MINUS     [reduce using rule 27 (expB)]
    PLUS      [reduce using rule 27 (expB)]
    $default  reduce using rule 27 (expB)

    expB  go to state 68


state 60

   25 expB: PLUS expA . expB

    EQ     shift, and go to state 43
    GT     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    PLUS   shift, and go to state 47

    EQ        [reduce using rule 27 (expB)]
    GT        [reduce using rule 27 (expB)]
    LT        [reduce using rule 27 (expB)]
    MINUS     [reduce using rule 27 (expB)]
    PLUS      [reduce using rule 27 (expB)]
    $default  reduce using rule 27 (expB)

    expB  go to state 69


state 61

   34 expD: DIVIDE expC . expD

    DIVIDE  shift, and go to state 49
    MULT    shift, and go to state 50

    DIVIDE    [reduce using rule 35 (expD)]
    MULT      [reduce using rule 35 (expD)]
    $default  reduce using rule 35 (expD)

    expD  go to state 70


state 62

   33 expD: MULT expC . expD

    DIVIDE  shift, and go to state 49
    MULT    shift, and go to state 50

    DIVIDE    [reduce using rule 35 (expD)]
    MULT      [reduce using rule 35 (expD)]
    $default  reduce using rule 35 (expD)

    expD  go to state 71


state 63

    9 stmt: IF LPARAN exp RPARAN stmt . stmtA

    ELSE  shift, and go to state 72

    ELSE      [reduce using rule 12 (stmtA)]
    $default  reduce using rule 12 (stmtA)

    stmtA  go to state 73


state 64

    7 stmt: ID @3 ASSIGN exp SEMICOLON .

    $default  reduce using rule 7 (stmt)


state 65

   24 expB: EQ expA expB .

    $default  reduce using rule 24 (expB)


state 66

   23 expB: GT expA expB .

    $default  reduce using rule 23 (expB)


state 67

   22 expB: LT expA expB .

    $default  reduce using rule 22 (expB)


state 68

   26 expB: MINUS expA expB .

    $default  reduce using rule 26 (expB)


state 69

   25 expB: PLUS expA expB .

    $default  reduce using rule 25 (expB)


state 70

   34 expD: DIVIDE expC expD .

    $default  reduce using rule 34 (expD)


state 71

   33 expD: MULT expC expD .

    $default  reduce using rule 33 (expD)


state 72

   11 stmtA: ELSE . stmt

    WHILE   shift, and go to state 15
    IF      shift, and go to state 16
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    ID      shift, and go to state 17
    LBRACE  shift, and go to state 12

    stmt       go to state 74
    stmtBlock  go to state 20
    typeDecl   go to state 21
    type       go to state 22


state 73

    9 stmt: IF LPARAN exp RPARAN stmt stmtA .

    $default  reduce using rule 9 (stmt)


state 74

   11 stmtA: ELSE stmt .

    $default  reduce using rule 11 (stmtA)
