/*=========================================
File project4-yacc.y
============================================*/

%token WHILE IF ELSE RETURN INT FLOAT ID ICONST FCONST ERROR END
%token SEMICOLON
%token LPARAN RPARAN
%token LBRACE RBRACE
%nonassoc ASSIGN
%nonassoc LT GT EQ
%left PLUS MINUS MULT DIVIDE
%{
	#include "./project4-ast.h"
	AST* programAST = NULL;
	#define YYSTYPE AST*
	int yydebug = 1;
	#define YYDEBUG 1
	extern char* yytext;
	extern int yyleng;
	
%}

%%

program : 			{ push_block(); }	
		funcdefn	
				{ pop_block();  programAST = $2;  }

funcdefn : 	type  ID 	{ new_varDecl(yytext, yyleng, (Type_enum)$1);
				  $2 = new_var(yytext, yyleng); }
		LPARAN RPARAN stmtBlock
				{ $$ = new_operator(FUNC_DEFN, $3, $6, 0, (Type_enum)$1); }

stmt : typeDecl SEMICOLON 	{ $$ = $1; }		
	| ID ASSIGN exp SEMICOLON		
	| WHILE LPARAN exp RPARAN stmt 	
	| IF LPARAN exp RPARAN stmt stmtA 	
	| stmtBlock 				

stmtA :	ELSE stmt 
	| 

stmtList : stmt stmtList 	{ $$ = new_operator(STMT_LIST, $1, $2, 0, TYPE_void); }
	|

stmtBlock : LBRACE		{ push_block(); }	
	    stmtList 
	    RBRACE		{ pop_block(); $$ = new_operator(STMT_BLOCK, $3, 0, 0, TYPE_void); }

typeDecl : type ID		{ new_varDecl(yytext, yyleng, (Type_enum)$1);
				  $$ = new_var(yytext,yyleng); }	

type : 		INT		{ $$ = (AST *) TYPE_int; }
		| FLOAT		{ $$ = (AST *) TYPE_float; }

exp : expA expB			{ $$ = 

expA : expC expD		{ $$ = new_operator(  ((AST_enum)$1>(AST_enum)$2)?(AST_enum)$1:(AST_enum)$2, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); }

expB : LT expA expB 		{ $$ = new_operator(EXP_LT, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); }
	| GT expA expB		{ $$ = new_operator(EXP_GT, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); } 		
	| EQ expA expB		{ $$ = new_operator(EXP_EQ, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); } 
	| PLUS expA expB	{ $$ = new_operator(EXP_PLUS, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); } 
	| MINUS expA expB	{ $$ = new_operator(EXP_MINUS, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); } 
	|

expC : ID 			{ $$ = $1; }
	| ICONST 		{ $$ = new_ICONST(atoi(yytext)); }
	| FCONST 		{ $$ = new_FCONST(yytext,yyleng); }
	| MINUS exp 		{ $$ = new_operator(EXP_UMINUS, $1, $2, 0, (Type_enum)$2); }
	| LPARAN exp RPARAN	{ $$ = $1; }

expD : MULT expC expD 		{ $$ = new_operator(EXP_MULT, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$2)?(Type_enum)$1:(Type_enum)$2); }
	| DIVIDE expC expD 	{ $$ = new_operator(EXP_DIVIDE, $1, $2, 0, ((Type_enum)$1)>((Type_enum)$1)?(Type_enum)$1:(Type_enum)$2); }
	|
; 


%%
#include "./lex.yy.c"
int main()
{
yyparse();
if (programAST != NULL) {
print_AST(programAST,0);
}
return 0;
}
